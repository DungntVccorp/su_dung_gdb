* tracepoint khác với break point và watch point, tại tracepoint chương trình ko bị dừng.
Tại đó, gdb chỉ giúp ta thu thập những dữ liệu mà mình cần khi một đoạn code nào đó được thực thi.

* tracepoint hiện tại chỉ được hỗ trợ khi sử dụng với gdbserver, do đó khi muốn thực hiện tracepoint trên chính nơi mà chương trình đang chạy ta không thể dùng gdb một cách trực tiếp mà dùng thông qua gdbserver trên local host.

* Bây giờ ta sẽ thực hiện tracepoint cho chương trình trace_point.c 
  Chương trình sẽ như một daemon (dịch vụ chạy ngầm) và trong đó có 3 thread chạy song song.
  
	Nhiệm vụ của ta là xem xét sự thay đổi của biến data1 và biến data2 trong deamon này khi nó đang chạy mà không cần phải dừng chương trình.

	Bước 1: ở cửa sổ 1, biên dịch và chạy chương trình:
		$gcc trace_point.c -lpthread -g -o trace_point; ./trace_point

	Bước 2: ở cửa sổ 2, xác định process ID của daemon trace_point
		$ps -ef |grep trace_point
		Giả sử process ID của nó là 1234

	Bước 3: ở cửa sổ 2, chuyển qua quyền root chạy gdbserver (có thể chạy trong background bằng cách thêm "&" vào cuối lệnh cũng được)
		#gdbserver --multi --once localhost:55555

		Note: sử dụng "--multi" để khỏi phải cung cấp tên chương trình hoặc là process ID khi khởi động gdbserver
				sử dụng "--once" để gdbserver tự động tắt sau khi đã có 1 gdb client kết nối thàng công.
				sử dụng "localhost:55555" để xác định cổng mà thông qua đó gdb client có thể kết nối với gdbserver.

	Bước 4: ở cửa sổ 3, chuyển qua quyền root, chạy gdb client, thiết lập thông số rồi kết nối gdbserver
		#gdb -q

		Thiết lập một số thông số cơ bản và kết nối tới gdbserver
			(gdb)set target-async on
			(gdb)set non-stop on
			(gdb)set pagination off
			(gdb)set remote interrupt-on-connect off

		Xác định file thực thi (đường dẫn của file thực thi ở gdb client chứ ko phải file thực thi ở gdb server)
			(gdb)file /duong_dan_den_file_thuc_thi_trace_point/trace_point

		Kết nối với gdbserver
			(gdb)target extended-remote localhost:55555

	Bước 5: ở cửa sổ 3, trong gdb client, thiết lập và bắt đầu tracing data 

		Nhờ gdbserver attach vào chương trình đang chạy, với thông số là process ID của chương trình đang chạy
		Sau khi lệnh attach thì chương trình bị dừng 1 thời gian rất nhỏ sau đó vẫn tiếp tục chạy,
			(gdb)attach 1234 &

		Xem có bao nhiêu threads đang chạy
			(gdb)info threadss

		Xem mã nguồn của hàm thread2Poll
			(gdb)l thread2Poll

		Tạo tracepoint tại dòng 41 để xem giá trị của biến data2 khi đoạn code tại dòng 41 này được thực thi
			(gdb)trace trace_point.c:41

		Xác định những công việc cần thực hiện cho tracepoint trên (do số thứ tự của tracepoint là 1 nên ta dùng 1)
		Ở đây ta muốn thu thập giá trị biến data2
			(gdb)actions 1
			>collect data2
			>end

		Xem cấu hình, lệnh sẽ thực hiện trong khi tracepoint xảy ra của tracepoint vừa mới tạo:
			(gdb) info break 1
			Num     Type           Disp Enb Address            What
			1       tracepoint     keep y   0x00000000004008eb in thread2Poll at trace_point.c:41
			        tracepoint already hit 0 times
			        trace buffer usage 0 bytes
			        collect data2
			        not installed on target

		Bắt đầu trace, lưu ý sau lệnh này chương trình vẫn tiếp tục chạy
			(gdb)tstart

		Xem trạng thái của các tracepoint, trace được bao nhiêu frame rồi:
			(gdb)tstatus
			Trace is running on the target.
			Collected 4 trace frames.
			Trace buffer has 5239592 bytes of 5242880 bytes free (0% full).
			Trace will stop if GDB disconnects.
			Not looking at any trace frame.
			Trace started at 1444384979.992316 secs, stopped -131.-446308 secs later.

	Bước 6: ở cửa sổ 3, trong gdb client, dừng trace và xem kết quả thu được
		Dừng trace để xem chi tiết những frame đã thu thập được, chương trình vân ko dừng sau lệnh này, chỉ có dừng thu thập dữ liệu cho các tracepoint mà thôi
			(gdb)tstop
			(gdb)tstatus
			Trace stopped by a tstop command ().
			Collected 10 trace frames.
			Trace buffer has 5234660 bytes of 5242880 bytes free (0% full).
			Trace will stop if GDB disconnects.
			Looking at trace frame 0, tracepoint 2.
			Trace started at 1444384979.992316 secs, stopped 9.801722 secs later.

		Xem frame 0:
			(gdb) tfind 0
			Found trace frame 0, tracepoint 2
			41                      fprintf(stdout, "thread2's data:%u\n", data2);
			(gdb) tdump
			Data collected at tracepoint 2, trace frame 0:
			data2 = 519

		Xem frame 1:
			(gdb) tfind 1
			Found trace frame 1, tracepoint 2
			41                      fprintf(stdout, "thread2's data:%u\n", data2);
			(gdb) tdump
			Data collected at tracepoint 2, trace frame 1:
			data2 = 520

		Xem frame 2:
			(gdb) tfind 2
			Found trace frame 2, tracepoint 2
			41                      fprintf(stdout, "thread2's data:%u\n", data2);
			(gdb) tdump
			Data collected at tracepoint 2, trace frame 2:
			data2 = 521

		Khi có nhiều tracepoint, ta cũng có thể xem số lần tracepoint trải qua bằng (gdb) info thread

	Bước 7: Dettach chương trình, để chương trình tiếp tục chạy bình thường
		
			(gdb) detach
